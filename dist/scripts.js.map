{"mappings":"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","sources":["<anon>","lib/scripts.js","lib/js/nav-scripts.js","lib/blocks/block-index.js","lib/blocks/resume-block/resume-block-editor.jsx"],"sourcesContent":["(() => {\n\nconsole.log(\"nav scripts are in\");\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    const mainContent = document.getElementById(\"main-content\");\n    const navLinks = document.querySelectorAll(\"nav a\");\n    const homeLink = document.getElementById(\"home-link\");\n    const sidebar = document.getElementById(\"sidebar\");\n    const mobileMenuButton = document.getElementById(\"mobile_menu_checkbox\");\n    // Function to fetch page content asynchronously from the WordPress API\n    async function fetchPageContent(slug, isHistoryPush = true) {\n        try {\n            let apiUrl = \"/wp-json/wp/v2/pages\";\n            // If slug is provided, fetch that page; otherwise, load the homepage (adjust slug as needed)\n            if (slug) apiUrl += `?slug=${slug}`;\n            else apiUrl += `?slug=homepage`;\n            const response = await fetch(apiUrl);\n            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n            const data = await response.json();\n            if (data.length > 0) {\n                mainContent.innerHTML = data[0].content.rendered;\n                document.title = \"Eric Rees\" + (slug ? ` > ${data[0].title.rendered}` : \"\");\n                Array.from(document.body.classList).filter((cls)=>cls.startsWith(\"page-\")).forEach((cls)=>document.body.classList.remove(cls));\n                // Add a new class based on the slug (or 'page-home' if slug is empty)\n                document.body.classList.add(slug ? `page-${slug}` : \"page-home\");\n                // Only update browser history if needed\n                if (isHistoryPush) history.pushState({\n                    slug: slug\n                }, \"\", slug ? `/${slug}` : \"/\");\n                // Update the \"show\" class on homeLink as needed\n                if (homeLink) {\n                    if (window.location.pathname === \"/\") homeLink.classList.remove(\"show\");\n                    else homeLink.classList.add(\"show\");\n                }\n            }\n        } catch (error) {\n            console.error(\"Error loading page:\", error);\n        }\n    }\n    // Determine the initial slug from the URL.\n    // If the pathname is not \"/\" then extract the slug from it.\n    let initialSlug = \"\";\n    if (window.location.pathname !== \"/\") {\n        // This assumes your URL structure is like \"/some-slug\"\n        const parts = window.location.pathname.split(\"/\").filter(Boolean);\n        initialSlug = parts.pop();\n    }\n    // Instead of forcing the base URL, initialize the state from the URL\n    history.replaceState({\n        slug: initialSlug\n    }, \"\", window.location.pathname);\n    // On initial load, fetch the page content based on the current slug.\n    fetchPageContent(initialSlug, false);\n    // Listen for popstate events (back/forward navigation)\n    window.addEventListener(\"popstate\", function(event) {\n        // If state exists, load the corresponding page content without pushing a new state.\n        if (event.state) fetchPageContent(event.state.slug, false);\n    });\n    // Handle navigation clicks for all nav links\n    navLinks.forEach((link)=>{\n        link.addEventListener(\"click\", async function(event) {\n            event.preventDefault();\n            const url = this.getAttribute(\"href\");\n            const slug = url.split(\"/\").filter(Boolean).pop(); // Extract slug from URL\n            // If this is the home link, use an empty slug; otherwise, use the extracted slug\n            if (this === homeLink) await fetchPageContent(\"\", true);\n            else await fetchPageContent(slug, true);\n        });\n    });\n    // Handle back/forward navigation\n    window.addEventListener(\"popstate\", async function(event) {\n        const slug = event.state ? event.state.slug : \"\"; // Extract slug from state\n        await fetchPageContent(slug, false);\n    });\n    //Mutation Observer for Sidebar Opening and Closing\n    if (!mobileMenuButton || !sidebar || !mainContent) {\n        console.error(\"One or more required elements were not found.\");\n        return;\n    }\n    function syncCheckbox() {\n        mobileMenuButton.checked = sidebar.classList.contains(\"active\");\n    }\n    function toggleMenu() {\n        sidebar.classList.toggle(\"active\");\n        mainContent.classList.toggle(\"darken\");\n        syncCheckbox();\n    }\n    mobileMenuButton.addEventListener(\"click\", function() {\n        toggleMenu();\n    });\n    mainContent.addEventListener(\"click\", function() {\n        if (sidebar.classList.contains(\"active\")) {\n            sidebar.classList.remove(\"active\");\n            mainContent.classList.remove(\"darken\");\n            syncCheckbox();\n        }\n    });\n    const observer = new MutationObserver(function(mutations) {\n        mutations.forEach(function(mutation) {\n            if (mutation.type === \"attributes\" && mutation.attributeName === \"class\") syncCheckbox();\n        });\n    });\n    observer.observe(sidebar, {\n        attributes: true\n    });\n    // if( darkLightSlider ) {\n    //     darkLightSlider.addEventListener(\"click\", function () {\n    //         if ( darkLightSlider.classList.contains(\"dark\") ) {\n    //             darkLightSlider.classList.remove(\"dark\");\n    //             darkLightSlider.classList.add(\"light\");\n    //             localStorage.setItem('theme', 'light');\n    //         } else {\n    //             darkLightSlider.classList.remove(\"light\");\n    //             darkLightSlider.classList.add(\"dark\");\n    //             localStorage.setItem('theme', 'dark');\n    //         } \n    //     })\n    // }\n    // DARK/LIGHT TOGGLE SECTION\n    const checkbox = document.querySelector('.toggle-switch input[type=\"checkbox\"]');\n    const darkLightSlider = document.getElementById('dl-slider');\n    // Determine the stored theme (default to \"dark\" if not set)\n    const storedTheme = localStorage.getItem('theme') || 'dark';\n    if (storedTheme === 'light') {\n        darkLightSlider.classList.remove('dark');\n        darkLightSlider.classList.add('light');\n        checkbox.checked = true;\n        document.documentElement.setAttribute('data-theme', 'light');\n    } else {\n        darkLightSlider.classList.remove('light');\n        darkLightSlider.classList.add('dark');\n        checkbox.checked = false;\n        document.documentElement.setAttribute('data-theme', 'dark');\n    }\n    checkbox.addEventListener('change', function() {\n        if (checkbox.checked) {\n            // Switch to light mode\n            darkLightSlider.classList.remove('dark');\n            darkLightSlider.classList.add('light');\n            localStorage.setItem('theme', 'light');\n            document.documentElement.setAttribute('data-theme', 'light');\n        } else {\n            // Switch to dark mode\n            darkLightSlider.classList.remove('light');\n            darkLightSlider.classList.add('dark');\n            localStorage.setItem('theme', 'dark');\n            document.documentElement.setAttribute('data-theme', 'dark');\n        }\n    });\n});\n\n\n\nconst { registerBlockType: $2d2a07d6ce16ccb2$var$registerBlockType } = wp.blocks;\nconst { useBlockProps: $2d2a07d6ce16ccb2$var$useBlockProps } = wp.blockEditor;\n$2d2a07d6ce16ccb2$var$registerBlockType('october/resume-block', {\n    title: 'Resume Block',\n    icon: 'admin-users',\n    category: 'widgets',\n    edit: ()=>{\n        return /*#__PURE__*/ React.createElement(\"div\", $2d2a07d6ce16ccb2$var$useBlockProps(), /*#__PURE__*/ React.createElement(\"p\", null, \"Edit Mode: Resume Block\"));\n    },\n    save: ()=>{\n        return null; // Using PHP render_callback\n    }\n});\n\n\n\n\n\n})();\n//# sourceMappingURL=scripts.js.map\n","import '/style.css'\nimport '/lib/js/nav-scripts.js'\nimport '/lib/blocks/block-index.js'","console.log(\"nav scripts are in\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    const mainContent = document.getElementById(\"main-content\");\n    const navLinks = document.querySelectorAll(\"nav a\");\n    const homeLink = document.getElementById(\"home-link\");\n    const sidebar = document.getElementById(\"sidebar\");\n    const mobileMenuButton = document.getElementById(\"mobile_menu_checkbox\");\n\n    // Function to fetch page content asynchronously from the WordPress API\n    async function fetchPageContent(slug, isHistoryPush = true) {\n        try {\n            let apiUrl = \"/wp-json/wp/v2/pages\";\n\n            // If slug is provided, fetch that page; otherwise, load the homepage (adjust slug as needed)\n            if (slug) {\n                apiUrl += `?slug=${slug}`;\n            } else {\n                apiUrl += `?slug=homepage`;\n            }\n\n            const response = await fetch(apiUrl);\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            const data = await response.json();\n\n            if (data.length > 0) {\n                mainContent.innerHTML = data[0].content.rendered;\n\n                document.title = \"Eric Rees\" + (slug ? ` > ${data[0].title.rendered}` : \"\");\n\n                Array.from(document.body.classList)\n                    .filter(cls => cls.startsWith(\"page-\"))\n                    .forEach(cls => document.body.classList.remove(cls));\n                // Add a new class based on the slug (or 'page-home' if slug is empty)\n                document.body.classList.add(slug ? `page-${slug}` : \"page-home\");\n                \n                // Only update browser history if needed\n                if (isHistoryPush) {\n                    history.pushState({ slug }, \"\", slug ? `/${slug}` : \"/\");\n                }\n\n                // Update the \"show\" class on homeLink as needed\n                if (homeLink) {\n                    if (window.location.pathname === \"/\") {\n                        homeLink.classList.remove(\"show\");\n                    } else {\n                        homeLink.classList.add(\"show\");\n                    }\n                }\n            }\n        } catch (error) {\n            console.error(\"Error loading page:\", error);\n        }\n    }\n\n    // Determine the initial slug from the URL.\n    // If the pathname is not \"/\" then extract the slug from it.\n    let initialSlug = \"\";\n    if (window.location.pathname !== \"/\") {\n        // This assumes your URL structure is like \"/some-slug\"\n        const parts = window.location.pathname.split(\"/\").filter(Boolean);\n        initialSlug = parts.pop();\n    }\n\n    // Instead of forcing the base URL, initialize the state from the URL\n    history.replaceState({ slug: initialSlug }, \"\", window.location.pathname);\n\n    // On initial load, fetch the page content based on the current slug.\n    fetchPageContent(initialSlug, false);\n\n    // Listen for popstate events (back/forward navigation)\n    window.addEventListener(\"popstate\", function (event) {\n        // If state exists, load the corresponding page content without pushing a new state.\n        if (event.state) {\n            fetchPageContent(event.state.slug, false);\n        }\n    });\n\n    // Handle navigation clicks for all nav links\n    navLinks.forEach(link => {\n        link.addEventListener(\"click\", async function (event) {\n            event.preventDefault();\n            const url = this.getAttribute(\"href\");\n            const slug = url.split(\"/\").filter(Boolean).pop(); // Extract slug from URL\n\n            // If this is the home link, use an empty slug; otherwise, use the extracted slug\n            if (this === homeLink) {\n                await fetchPageContent(\"\", true);\n            } else {\n                await fetchPageContent(slug, true);\n            }\n        });\n    });\n\n    // Handle back/forward navigation\n    window.addEventListener(\"popstate\", async function (event) {\n        const slug = event.state ? event.state.slug : \"\"; // Extract slug from state\n        await fetchPageContent(slug, false);\n    });\n\n    //Mutation Observer for Sidebar Opening and Closing\n    if (!mobileMenuButton || !sidebar || !mainContent) {\n        console.error(\"One or more required elements were not found.\");\n        return;\n      }\n  \n      function syncCheckbox() {\n        mobileMenuButton.checked = sidebar.classList.contains(\"active\");\n      }\n  \n      function toggleMenu() {\n        sidebar.classList.toggle(\"active\");\n        mainContent.classList.toggle(\"darken\");\n        syncCheckbox();\n      }\n  \n      mobileMenuButton.addEventListener(\"click\", function () {\n        toggleMenu();\n      });\n  \n      mainContent.addEventListener(\"click\", function () {\n        if (sidebar.classList.contains(\"active\")) {\n          sidebar.classList.remove(\"active\");\n          mainContent.classList.remove(\"darken\");\n          syncCheckbox();\n        }\n      });\n  \n      const observer = new MutationObserver(function (mutations) {\n        mutations.forEach(function (mutation) {\n          if (mutation.type === \"attributes\" && mutation.attributeName === \"class\") {\n            syncCheckbox();\n          }\n        });\n      });\n  \n      observer.observe(sidebar, { attributes: true });\n\n    // if( darkLightSlider ) {\n    //     darkLightSlider.addEventListener(\"click\", function () {\n    //         if ( darkLightSlider.classList.contains(\"dark\") ) {\n    //             darkLightSlider.classList.remove(\"dark\");\n    //             darkLightSlider.classList.add(\"light\");\n    //             localStorage.setItem('theme', 'light');\n    //         } else {\n    //             darkLightSlider.classList.remove(\"light\");\n    //             darkLightSlider.classList.add(\"dark\");\n    //             localStorage.setItem('theme', 'dark');\n    //         } \n    //     })\n    // }\n    // DARK/LIGHT TOGGLE SECTION\n    const checkbox = document.querySelector('.toggle-switch input[type=\"checkbox\"]');\n    const darkLightSlider = document.getElementById('dl-slider');\n\n    // Determine the stored theme (default to \"dark\" if not set)\n    const storedTheme = localStorage.getItem('theme') || 'dark';\n\n    if (storedTheme === 'light') {\n        darkLightSlider.classList.remove('dark');\n        darkLightSlider.classList.add('light');\n        checkbox.checked = true;\n        document.documentElement.setAttribute('data-theme', 'light');\n    } else {\n        darkLightSlider.classList.remove('light');\n        darkLightSlider.classList.add('dark');\n        checkbox.checked = false;\n        document.documentElement.setAttribute('data-theme', 'dark');\n    }\n\n    checkbox.addEventListener('change', function () {\n        if (checkbox.checked) {\n          // Switch to light mode\n          darkLightSlider.classList.remove('dark');\n          darkLightSlider.classList.add('light');\n          localStorage.setItem('theme', 'light');\n          document.documentElement.setAttribute('data-theme', 'light');\n        } else {\n          // Switch to dark mode\n          darkLightSlider.classList.remove('light');\n          darkLightSlider.classList.add('dark');\n          localStorage.setItem('theme', 'dark');\n          document.documentElement.setAttribute('data-theme', 'dark');\n        }\n    });\n});\n","import '../blocks/block-index.css'\nimport '../blocks/resume-block/resume-block-editor.jsx'","const { registerBlockType } = wp.blocks;\nconst { useBlockProps } = wp.blockEditor;\n\nregisterBlockType('october/resume-block', {\n    title: 'Resume Block',\n    icon: 'admin-users',\n    category: 'widgets',\n    edit: () => {\n        return (\n            <div {...useBlockProps()}>\n                <p>Edit Mode: Resume Block</p>\n            </div>\n        );\n    },\n    save: () => {\n        return null; // Using PHP render_callback\n    }\n});"],"names":["console","log","document","addEventListener","mainContent","getElementById","navLinks","querySelectorAll","homeLink","sidebar","mobileMenuButton","fetchPageContent","slug","isHistoryPush","apiUrl","response","fetch","ok","Error","status","data","json","length","innerHTML","content","rendered","title","Array","from","body","classList","filter","cls","startsWith","forEach","remove","add","history","pushState","window","location","pathname","error","initialSlug","parts","split","Boolean","pop","replaceState","event","state","link","preventDefault","url","getAttribute","syncCheckbox","checked","contains","toggle","observer","MutationObserver","mutations","mutation","type","attributeName","observe","attributes","checkbox","querySelector","darkLightSlider","storedTheme","localStorage","getItem","documentElement","setAttribute","setItem","registerBlockType","$2d2a07d6ce16ccb2$var$registerBlockType","wp","blocks","useBlockProps","$2d2a07d6ce16ccb2$var$useBlockProps","blockEditor","icon","category","edit","React","createElement","save"],"version":3,"file":"scripts.js.map"}